{"version":3,"sources":["components/FilesDropbox.js","views/LandingPage.js","App.js","reportWebVitals.js","index.js"],"names":["FilesDropbox","props","window","File","FileReader","FileList","Blob","alert","dropBoxTextDefault","test","navigator","userAgent","dropBoxTextUploading","useState","dropBoxText","setDropBoxText","uploadFiles","filesToUploadData","a","length","fetch","method","headers","body","JSON","stringify","then","response","json","success","filename","setFilesUploadedArray","catch","error","console","log","finally","isAbleToUpload","readFileContent","file","Promise","resolve","reject","fileReader","onload","target","result","onerror","readAsDataURL","changeHandler","ev","preventDefault","filesArray","dataTransfer","files","items","filesToUploadArray","fileCount","fileContentBinary","name","errorRes","className","id","encType","onDrop","onDragOver","onClick","filesDropboxInputElement","document","getElementById","click","type","multiple","onChange","hidden","LandingPage","filesUploadedArray","map","row","moment","storedDateTime","format","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.884a0663.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport '../assets/css/components/FilesDropbox.css';\r\n\r\nexport default function FilesDropbox(props) {\r\n\r\n    // Check for the various File API support.\r\n    if (window.File && window.FileReader && window.FileList && window.Blob) {\r\n        // Great success! All the File APIs are supported.\r\n    } else {\r\n        alert('The File APIs are not fully supported in this browser.');\r\n    }\r\n\r\n    let dropBoxTextDefault = 'Browse for files \\n (or drag and drop files)';\r\n    if (/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent)) {\r\n        dropBoxTextDefault = 'Browse for files \\n (press here)';\r\n    }\r\n    const dropBoxTextUploading = 'Uploading...';\r\n    const [dropBoxText, setDropBoxText] = useState(dropBoxTextDefault);\r\n\r\n    async function uploadFiles(filesToUploadData) {\r\n        if (!filesToUploadData || filesToUploadData.length <= 0) {\r\n            return;\r\n        }\r\n        await fetch('http://localhost:29323/api/Customer/PostFileUpload', {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify(filesToUploadData)\r\n        })\r\n            .then(response => response.json())\r\n            .then(success => {\r\n                if (success && success[0] && success[0].filename.length > 1) {\r\n                    props.setFilesUploadedArray(success);\r\n                }\r\n            })\r\n            .catch(error => console.log(error))\r\n            .finally(() => {\r\n                setDropBoxText(dropBoxTextDefault)\r\n            })\r\n    }\r\n\r\n    function isAbleToUpload() {\r\n        if (dropBoxText !== dropBoxTextDefault) {\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    //Trigger a browse dialog via the hidden input\r\n    function browseFilesToUpload() {\r\n        if (!isAbleToUpload()) {\r\n            return false;\r\n        }\r\n        let filesDropboxInputElement = document.getElementById('filesDropboxInputClick');\r\n        if (filesDropboxInputElement) {\r\n            filesDropboxInputElement.click();\r\n        }\r\n    }\r\n\r\n    function readFileContent(file) {\r\n        return new Promise((resolve, reject) => {\r\n            let fileReader = new FileReader();\r\n            fileReader.onload = function (response) {\r\n                resolve(response.target.result);\r\n            }\r\n            fileReader.onerror = reject;\r\n            fileReader.readAsDataURL(file); //settings to output base64 (increases filesize by 30%). Need to find a way to transfer binary without encoding\r\n        })\r\n    }\r\n\r\n    //Changes made within filesDropbox component\r\n    async function changeHandler(ev) {\r\n        ev.preventDefault();\r\n        if (!isAbleToUpload()) {\r\n            return false;\r\n        }\r\n        setDropBoxText(dropBoxTextUploading);\r\n        let filesArray = [];\r\n        if (ev.dataTransfer && ev.dataTransfer.files.length > 0) {\r\n            filesArray = ev.dataTransfer.files;\r\n        }\r\n        else if (ev.dataTransfer && ev.dataTransfer.items.length > 0) {\r\n            filesArray = ev.dataTransfer.items;\r\n        }\r\n        else if (ev.target && ev.target.files.length > 0) {\r\n            filesArray = ev.target.files;\r\n        }\r\n        if (filesArray && filesArray.length > 0) {\r\n            let filesToUploadArray = [];\r\n            for (let fileCount = 0; fileCount < filesArray.length; fileCount++) {\r\n                let file = filesArray[fileCount];\r\n                await readFileContent(file)\r\n                    .then(fileContentBinary => filesToUploadArray[fileCount] = {\r\n                        \"filename\": file.name,\r\n                        \"content\": fileContentBinary\r\n                    })\r\n                    .catch(errorRes => console.log('Error: ' + errorRes));\r\n            }\r\n            uploadFiles(filesToUploadArray);\r\n        }\r\n    }\r\n\r\n    function dragOverHandler(ev) {\r\n        ev.preventDefault();\r\n    }\r\n\r\n    return (\r\n        <div className={\"filesDropbox\"} id=\"filesDropboxInputDragAndDrop\" encType=\"multipart/form-data\" onDrop={changeHandler} onDragOver={dragOverHandler} onClick={browseFilesToUpload}>\r\n            {dropBoxText} <br />\r\n            <input type=\"file\" id=\"filesDropboxInputClick\" multiple onChange={changeHandler} hidden />\r\n        </div>\r\n    )\r\n}","import React, { useState } from 'react';\r\nimport moment from 'moment';\r\nimport FilesDropbox from '../components/FilesDropbox';\r\nimport '../assets/css/views/LandingPage.css';\r\n\r\nexport default function LandingPage(props) {\r\n\r\n    const [filesUploadedArray, setFilesUploadedArray] = useState();\r\n\r\n    return (\r\n        <div>\r\n            <br/>\r\n            <FilesDropbox setFilesUploadedArray={setFilesUploadedArray}/>\r\n            <br/>\r\n            <table>\r\n                <thead>\r\n                    <tr>\r\n                        <th>Filename</th>\r\n                        <th>Uploaded Date</th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    {!filesUploadedArray || filesUploadedArray.length <= 0 ?\r\n                        <tr>\r\n                            <td> </td>\r\n                            <td> </td>\r\n                        </tr>\r\n                        :\r\n                        filesUploadedArray.map((row) =>\r\n                            <tr key={row.id}>\r\n                                <td>{row.filename}</td>\r\n                                <td>{moment(row.storedDateTime).format(\"DD/MM/YYYY HH:mm\")}</td>\r\n                            </tr>\r\n                        )\r\n                    }\r\n                </tbody>\r\n            </table>\r\n        </div>\r\n    )\r\n}","import './assets/css/App.css';\nimport LandingPage from './views/LandingPage';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <LandingPage/>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './assets/css/index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}